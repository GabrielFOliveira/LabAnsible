> POSTGRESQL_DB    (/usr/lib/python3.8/site-packages/ansible/modules/database/postgresql/postgresql_db.py)

        Add or remove PostgreSQL databases from a remote host.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- ca_cert
        Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
        If the file exists, the server's certificate will be verified to be signed by one of these authorities.
        (Aliases: ssl_rootcert)[Default: (null)]
        type: str

- conn_limit
        Specifies the database connection limit.
        [Default: (null)]
        type: str
        version_added: 2.8

- encoding
        Encoding of the database
        [Default: (null)]
        type: str

- lc_collate
        Collation order (LC_COLLATE) to use in the database. Must match collation order of template database unless `template0' is
        used as template.
        [Default: (null)]
        type: str

- lc_ctype
        Character classification (LC_CTYPE) to use in the database (e.g. lower, upper, ...) Must match LC_CTYPE of template database
        unless `template0' is used as template.
        [Default: (null)]
        type: str

- login_host
        Host running the database.
        [Default: (null)]
        type: str

- login_password
        The password used to authenticate with.
        [Default: (null)]
        type: str

- login_unix_socket
        Path to a Unix domain socket for local connections.
        [Default: (null)]
        type: str

- login_user
        The username used to authenticate with.
        [Default: postgres]
        type: str

- maintenance_db
        The value specifies the initial database (which is also called as maintenance DB) that Ansible connects to.
        [Default: postgres]
        type: str
        version_added: 2.5

= name
        Name of the database to add or remove
        (Aliases: db)
        type: str

- owner
        Name of the role to set as owner of the database
        [Default: (null)]
        type: str

- port
        Database port to connect (if needed)
        (Aliases: login_port)[Default: 5432]
        type: int

- session_role
        Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.
        Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.
        [Default: (null)]
        type: str
        version_added: 2.8

- ssl_mode
        Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
        See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
        Default of `prefer' matches libpq default.
        (Choices: allow, disable, prefer, require, verify-ca, verify-full)[Default: prefer]
        type: str

- state
        The database state.
        `present' implies that the database should be created if necessary.
        `absent' implies that the database should be removed if present.
        `dump' requires a target definition to which the database will be backed up. (Added in Ansible 2.4) Note that in some
        PostgreSQL versions of pg_dump, which is an embedded PostgreSQL utility and is used by the module, returns rc 0 even when
        errors occurred (e.g. the connection is forbidden by pg_hba.conf, etc.), so the module returns changed=True but the dump has
        not actually been done. Please, be sure that your version of pg_dump returns rc 1 in this case.
        `restore' also requires a target definition from which the database will be restored. (Added in Ansible 2.4)
        The format of the backup will be detected based on the target name.
        Supported compression formats for dump and restore include `.bz2', `.gz' and `.xz'
        Supported formats for dump and restore include `.sql' and `.tar'
        (Choices: absent, dump, present, restore)[Default: present]
        type: str

- tablespace
        The tablespace to set for the database https://www.postgresql.org/docs/current/sql-alterdatabase.html.
        If you want to move the database back to the default tablespace, explicitly set this to pg_default.
        [Default: (null)]
        type: path
        version_added: 2.9

- target
        File to back up or restore from.
        Used when `state' is `dump' or `restore'.
        [Default: (null)]
        type: path
        version_added: 2.4

- target_opts
        Further arguments for pg_dump or pg_restore.
        Used when `state' is `dump' or `restore'.
        [Default: (null)]
        type: str
        version_added: 2.4

- template
        Template used to create the database
        [Default: (null)]
        type: str


NOTES:
      * State `dump' and `restore' don't require `psycopg2' since version 2.8.
      * The default authentication assumes that you are either logging in as or sudo'ing to the `postgres' account on the host.
      * To avoid "Peer authentication failed for user postgres" error, use postgres user as a `become_user'.
      * This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host
        before using this module.
      * If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the
        remote host.
      * For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before
        using this module.
      * The ca_cert parameter requires at least Postgres version 8.4 and `psycopg2' version 2.4.3.


SEE ALSO:
      * CREATE DATABASE reference
           Complete reference of the CREATE DATABASE command documentation.
           https://www.postgresql.org/docs/current/sql-createdatabase.html
      * DROP DATABASE reference
           Complete reference of the DROP DATABASE command documentation.
           https://www.postgresql.org/docs/current/sql-dropdatabase.html
      * pg_dump reference
           Complete reference of pg_dump documentation.
           https://www.postgresql.org/docs/current/app-pgdump.html
      * pg_restore reference
           Complete reference of pg_restore documentation.
           https://www.postgresql.org/docs/current/app-pgrestore.html
      * Module postgresql_tablespace
           The official documentation on the postgresql_tablespace module.
           https://docs.ansible.com/ansible/2.9/modules/postgresql_tablespace_module.html
      * Module postgresql_info
           The official documentation on the postgresql_info module.
           https://docs.ansible.com/ansible/2.9/modules/postgresql_info_module.html
      * Module postgresql_ping
           The official documentation on the postgresql_ping module.
           https://docs.ansible.com/ansible/2.9/modules/postgresql_ping_module.html


REQUIREMENTS:  psycopg2

AUTHOR: Ansible Core Team
        METADATA:
          status:
          - stableinterface
          supported_by: community
        

EXAMPLES:

- name: Create a new database with name "acme"
  postgresql_db:
    name: acme

# Note: If a template different from "template0" is specified, encoding and locale settings must match those of the template.
- name: Create a new database with name "acme" and specific encoding and locale # settings.
  postgresql_db:
    name: acme
    encoding: UTF-8
    lc_collate: de_DE.UTF-8
    lc_ctype: de_DE.UTF-8
    template: template0

# Note: Default limit for the number of concurrent connections to a specific database is "-1", which means "unlimited"
- name: Create a new database with name "acme" which has a limit of 100 concurrent connections
  postgresql_db:
    name: acme
    conn_limit: "100"

- name: Dump an existing database to a file
  postgresql_db:
    name: acme
    state: dump
    target: /tmp/acme.sql

- name: Dump an existing database to a file (with compression)
  postgresql_db:
    name: acme
    state: dump
    target: /tmp/acme.sql.gz

- name: Dump a single schema for an existing database
  postgresql_db:
    name: acme
    state: dump
    target: /tmp/acme.sql
    target_opts: "-n public"

# Note: In the example below, if database foo exists and has another tablespace
# the tablespace will be changed to foo. Access to the database will be locked
# until the copying of database files is finished.
- name: Create a new database called foo in tablespace bar
  postgresql_db:
    name: foo
    tablespace: bar


